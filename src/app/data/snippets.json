{
  "snippets": [
    {
      "id": "1",
      "title": "React Custom Hook - useLocalStorage",
      "description": "Custom hook for persistent localStorage state management",
      "language": "javascript",
      "tags": ["react", "hooks", "storage"],
      "code": "function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}"
    },
    {
      "id": "2",
      "title": "Next.js API Route with Rate Limiting",
      "description": "API route implementation with rate limiting and error handling",
      "language": "javascript",
      "tags": ["nextjs", "api", "security"],
      "code": "import rateLimit from 'express-rate-limit';\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100\n});\n\nexport default async function handler(req, res) {\n  try {\n    await limiter(req, res);\n\n    if (req.method !== 'POST') {\n      return res.status(405).json({ error: 'Method not allowed' });\n    }\n\n    const { data } = req.body;\n    if (!data) {\n      return res.status(400).json({ error: 'Data is required' });\n    }\n\n    // Process data here\n    \n    return res.status(200).json({ success: true });\n  } catch (error) {\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n}"
    },
    {
      "id": "3",
      "title": "Tailwind Responsive Navigation",
      "description": "Responsive navigation bar with mobile menu and dark mode",
      "language": "jsx",
      "tags": ["tailwind", "react", "responsive"],
      "code": "export default function Navbar() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return (\n    <nav className=\"bg-white dark:bg-gray-800 shadow-lg\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Logo />\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                <NavLink href=\"/\">Home</NavLink>\n                <NavLink href=\"/about\">About</NavLink>\n                <NavLink href=\"/contact\">Contact</NavLink>\n              </div>\n            </div>\n          </div>\n          <div className=\"-mr-2 flex md:hidden\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\"\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {isOpen ? <XIcon /> : <MenuIcon />}\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {isOpen && (\n        <div className=\"md:hidden\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            <MobileNavLink href=\"/\">Home</MobileNavLink>\n            <MobileNavLink href=\"/about\">About</MobileNavLink>\n            <MobileNavLink href=\"/contact\">Contact</MobileNavLink>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}"
    },
    {
      "id": "4",
      "title": "React Error Boundary with Fallback",
      "description": "Advanced error boundary with retry mechanism and error logging",
      "language": "typescript",
      "tags": ["react", "error-handling", "typescript"],
      "code": "class ErrorBoundary extends React.Component<Props, State> {\n  state = { hasError: false, error: null };\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n    // Log to your error tracking service here\n  }\n\n  resetErrorBoundary = () => {\n    this.setState({ hasError: false, error: null });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"error-container\">\n          <h2>Something went wrong</h2>\n          <pre>{this.state.error?.message}</pre>\n          <button onClick={this.resetErrorBoundary}>\n            Try again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}"
    },
    {
      "id": "5",
      "title": "Advanced React Query Cache Management",
      "description": "Optimistic updates and cache manipulation with React Query",
      "language": "typescript",
      "tags": ["react-query", "cache", "optimization"],
      "code": "const useTodoMutation = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation(\n    async (newTodo: Todo) => {\n      const response = await fetch('/api/todos', {\n        method: 'POST',\n        body: JSON.stringify(newTodo)\n      });\n      return response.json();\n    },\n    {\n      onMutate: async (newTodo) => {\n        await queryClient.cancelQueries('todos');\n        const previousTodos = queryClient.getQueryData('todos');\n        \n        queryClient.setQueryData('todos', (old: Todo[]) => [\n          ...old,\n          { ...newTodo, id: Date.now() }\n        ]);\n        \n        return { previousTodos };\n      },\n      onError: (err, variables, context) => {\n        queryClient.setQueryData('todos', context.previousTodos);\n      },\n      onSettled: () => {\n        queryClient.invalidateQueries('todos');\n      }\n    }\n  );\n}"
    },
    {
      "id": "6",
      "title": "Next.js Middleware with Rate Limiting",
      "description": "Advanced middleware for API protection and request handling",
      "language": "typescript",
      "tags": ["nextjs", "middleware", "security"],
      "code": "import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nconst rateLimit = new Map();\n\nexport function middleware(request: NextRequest) {\n  const ip = request.ip ?? '127.0.0.1';\n  const timestamp = Date.now();\n  \n  const userRequests = rateLimit.get(ip) ?? [];\n  const recentRequests = userRequests.filter(\n    (time: number) => timestamp - time < 60000\n  );\n  \n  if (recentRequests.length >= 100) {\n    return new NextResponse(JSON.stringify({\n      error: 'Too many requests'\n    }), {\n      status: 429,\n      headers: {\n        'Content-Type': 'application/json',\n        'Retry-After': '60'\n      }\n    });\n  }\n  \n  rateLimit.set(ip, [...recentRequests, timestamp]);\n  \n  const response = NextResponse.next();\n  response.headers.set('X-RateLimit-Limit', '100');\n  response.headers.set('X-RateLimit-Remaining',\n    String(100 - recentRequests.length - 1)\n  );\n  \n  return response;\n}"
    },
    {
      "id": "7",
      "title": "React Performance Optimization HOC",
      "description": "Higher-Order Component for advanced performance optimization",
      "language": "typescript",
      "tags": ["react", "performance", "hoc"],
      "code": "function withPerformanceTracking<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  componentName: string\n) {\n  return class WithPerformance extends React.Component<P> {\n    private renderCount = 0;\n    private startTime: number = 0;\n    \n    componentDidMount() {\n      performance.mark(`${componentName}-mount-start`);\n      this.logMetrics('mount');\n    }\n    \n    componentDidUpdate() {\n      this.renderCount++;\n      this.logMetrics('update');\n    }\n    \n    private logMetrics(phase: 'mount' | 'update') {\n      const endTime = performance.now();\n      const duration = endTime - this.startTime;\n      \n      console.log(`[${componentName}] ${phase}:`, {\n        duration: `${duration.toFixed(2)}ms`,\n        renderCount: this.renderCount,\n        timestamp: new Date().toISOString()\n      });\n    }\n    \n    render() {\n      this.startTime = performance.now();\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}"
    },
    {
      "id": "8",
      "title": "Advanced Form Validation Hook",
      "description": "Custom hook for complex form validation with async checks",
      "language": "typescript",
      "tags": ["react", "forms", "validation"],
      "code": "function useFormValidation<T extends Record<string, any>>(\n  initialValues: T,\n  validationSchema: Record<keyof T, (value: any) => Promise<string | null>>\n) {\n  const [values, setValues] = useState<T>(initialValues);\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const validateField = async (name: keyof T, value: any) => {\n    try {\n      const error = await validationSchema[name](value);\n      setErrors(prev => ({ ...prev, [name]: error }));\n      return !error;\n    } catch (err) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: 'Validation failed'\n      }));\n      return false;\n    }\n  };\n  \n  const handleChange = async (name: keyof T, value: any) => {\n    setValues(prev => ({ ...prev, [name]: value }));\n    await validateField(name, value);\n  };\n  \n  const handleSubmit = async (onSubmit: (values: T) => Promise<void>) => {\n    setIsSubmitting(true);\n    \n    const validations = await Promise.all(\n      Object.entries(values).map(([key, value]) =>\n        validateField(key as keyof T, value)\n      )\n    );\n    \n    if (validations.every(Boolean)) {\n      await onSubmit(values);\n    }\n    \n    setIsSubmitting(false);\n  };\n  \n  return { values, errors, isSubmitting, handleChange, handleSubmit };\n}"
    },
    {
      "id": "9",
      "title": "React Animation Hook with Framer Motion",
      "description": "Custom hook for complex animations with Framer Motion",
      "language": "typescript",
      "tags": ["react", "animation", "framer-motion"],
      "code": "function useAnimatedMount() {\n  const controls = useAnimation();\n  const [ref, inView] = useInView({\n    threshold: 0.2,\n    triggerOnce: true\n  });\n\n  useEffect(() => {\n    if (inView) {\n      controls.start({\n        opacity: 1,\n        y: 0,\n        transition: {\n          duration: 0.5,\n          ease: 'easeOut'\n        }\n      });\n    }\n  }, [controls, inView]);\n\n  return {\n    ref,\n    initial: { opacity: 0, y: 50 },\n    animate: controls\n  };\n}"
    },
    {
      "id": "10",
      "title": "Advanced Redux Toolkit Slice",
      "description": "Complex Redux slice with async thunks and normalized state",
      "language": "typescript",
      "tags": ["redux", "typescript", "state-management"],
      "code": "import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\n\nconst todosAdapter = createEntityAdapter<Todo>();\n\nexport const fetchTodos = createAsyncThunk(\n  'todos/fetchTodos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/api/todos');\n      if (!response.ok) throw new Error('Network error');\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: todosAdapter.getInitialState({\n    loading: 'idle',\n    error: null\n  }),\n  reducers: {\n    todoAdded: todosAdapter.addOne,\n    todoToggled(state, action) {\n      const todo = state.entities[action.payload];\n      if (todo) todo.completed = !todo.completed;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.pending, (state) => {\n        state.loading = 'pending';\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        state.loading = 'idle';\n        todosAdapter.setAll(state, action.payload);\n      })\n      .addCase(fetchTodos.rejected, (state, action) => {\n        state.loading = 'idle';\n        state.error = action.payload;\n      });\n  }\n});"
    },
    {
      "id": "11",
      "title": "Next.js Dynamic Routing with Middleware",
      "description": "Advanced routing with authentication and redirects",
      "language": "typescript",
      "tags": ["nextjs", "routing", "auth"],
      "code": "import { NextResponse } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\n\nconst protectedPaths = [\n  '/dashboard',\n  '/settings',\n  '/profile'\n];\n\nexport async function middleware(req) {\n  const token = await getToken({ req, secret: process.env.JWT_SECRET });\n  const { pathname } = req.nextUrl;\n\n  if (protectedPaths.some(path => pathname.startsWith(path))) {\n    if (!token) {\n      const url = new URL('/auth/login', req.url);\n      url.searchParams.set('from', pathname);\n      return NextResponse.redirect(url);\n    }\n\n    if (!token.emailVerified && pathname !== '/settings/verify-email') {\n      return NextResponse.redirect(new URL('/settings/verify-email', req.url));\n    }\n  }\n\n  if (pathname.startsWith('/auth') && token) {\n    return NextResponse.redirect(new URL('/dashboard', req.url));\n  }\n\n  return NextResponse.next();\n}"
    },
    {
      "id": "12",
      "title": "React Suspense Boundary with Retry",
      "description": "Advanced error handling with Suspense and retry logic",
      "language": "typescript",
      "tags": ["react", "suspense", "error-handling"],
      "code": "function SuspenseBoundary({ children, fallback }) {\n  const [key, setKey] = useState(0);\n  const [error, setError] = useState(null);\n\n  const handleError = (error) => {\n    setError(error);\n    console.error('Caught error:', error);\n  };\n\n  const retry = () => {\n    setError(null);\n    setKey((k) => k + 1);\n  };\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <h3>Something went wrong</h3>\n        <pre>{error.message}</pre>\n        <button onClick={retry}>\n          Try again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <Suspense fallback={fallback}>\n      <ErrorBoundary key={key} onError={handleError}>\n        {children}\n      </ErrorBoundary>\n    </Suspense>\n  );\n}"
    },
    {
      "id": "13",
      "title": "Advanced SEO Component",
      "description": "Comprehensive SEO optimization with structured data",
      "language": "typescript",
      "tags": ["seo", "nextjs", "metadata"],
      "code": "export function SEO({ title, description, image, article }) {\n  const siteUrl = process.env.NEXT_PUBLIC_SITE_URL;\n  const structuredData = {\n    '@context': 'https://schema.org',\n    '@type': article ? 'Article' : 'WebPage',\n    headline: title,\n    description,\n    image: image ? `${siteUrl}${image}` : null,\n    datePublished: article?.publishDate,\n    dateModified: article?.modifiedDate,\n    author: article?.author ? {\n      '@type': 'Person',\n      name: article.author.name,\n      url: `${siteUrl}/authors/${article.author.slug}`\n    } : null\n  };\n\n  return (\n    <Head>\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      {image && <meta property=\"og:image\" content={`${siteUrl}${image}`} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{\n          __html: JSON.stringify(structuredData)\n        }}\n      />\n    </Head>\n  );\n}"
    },
    {
      "id": "14",
      "title": "WebSocket Real-time Hook",
      "description": "Custom hook for WebSocket real-time data with reconnection",
      "language": "typescript",
      "tags": ["websocket", "real-time", "hooks"],
      "code": "function useWebSocket<T>(url: string, options: WebSocketOptions = {}) {\n  const [data, setData] = useState<T | null>(null);\n  const [status, setStatus] = useState<'connecting' | 'connected' | 'closed'>('connecting');\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectAttempts = useRef(0);\n  \n  const connect = useCallback(() => {\n    try {\n      ws.current = new WebSocket(url);\n      \n      ws.current.onopen = () => {\n        setStatus('connected');\n        reconnectAttempts.current = 0;\n      };\n      \n      ws.current.onmessage = (event) => {\n        try {\n          const parsed = JSON.parse(event.data);\n          setData(parsed);\n          options.onMessage?.(parsed);\n        } catch (err) {\n          console.error('WebSocket message parse error:', err);\n        }\n      };\n      \n      ws.current.onclose = () => {\n        setStatus('closed');\n        if (reconnectAttempts.current < (options.maxRetries ?? 3)) {\n          setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, options.retryInterval ?? 3000);\n        }\n      };\n    } catch (err) {\n      console.error('WebSocket connection error:', err);\n    }\n  }, [url, options]);\n  \n  useEffect(() => {\n    connect();\n    return () => ws.current?.close();\n  }, [connect]);\n  \n  const send = useCallback((message: any) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  }, []);\n  \n  return { data, status, send };\n}"
    },
    {
      "id": "15",
      "title": "Advanced React Testing Pattern",
      "description": "Complex component testing with MSW and custom renders",
      "language": "typescript",
      "tags": ["testing", "msw", "react-testing-library"],
      "code": "import { render, screen, waitFor } from '@testing-library/react';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\n\nconst server = setupServer(\n  rest.get('/api/user', (req, res, ctx) => {\n    const isAuth = req.headers.get('Authorization');\n    if (!isAuth) {\n      return res(ctx.status(401));\n    }\n    return res(ctx.json({ name: 'John Doe', role: 'admin' }));\n  })\n);\n\nconst customRender = (ui, options = {}) => {\n  const AllProviders = ({ children }) => (\n    <QueryClientProvider client={new QueryClient()}>\n      <ThemeProvider theme={theme}>\n        <AuthProvider>\n          {children}\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n  \n  return render(ui, { wrapper: AllProviders, ...options });\n};\n\ndescribe('UserDashboard', () => {\n  beforeAll(() => server.listen());\n  afterEach(() => server.resetHandlers());\n  afterAll(() => server.close());\n  \n  it('handles authentication and data fetching', async () => {\n    customRender(<UserDashboard />);\n    \n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n    \n    await waitFor(() => {\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /admin/i })).toBeEnabled();\n    });\n  });\n});"
    },
    {
      "id": "16",
      "title": "Accessibility Focus Management",
      "description": "Advanced focus trap and management for modals",
      "language": "typescript",
      "tags": ["accessibility", "react", "a11y"],
      "code": "function useFocusTrap(isActive: boolean) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const previousActiveElement = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const container = containerRef.current;\n    if (!container) return;\n\n    previousActiveElement.current = document.activeElement as HTMLElement;\n\n    const focusableElements = container.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n\n    const firstFocusable = focusableElements[0] as HTMLElement;\n    const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n\n      if (e.shiftKey) {\n        if (document.activeElement === firstFocusable) {\n          e.preventDefault();\n          lastFocusable.focus();\n        }\n      } else {\n        if (document.activeElement === lastFocusable) {\n          e.preventDefault();\n          firstFocusable.focus();\n        }\n      }\n    };\n\n    container.addEventListener('keydown', handleKeyDown);\n    firstFocusable?.focus();\n\n    return () => {\n      container.removeEventListener('keydown', handleKeyDown);\n      previousActiveElement.current?.focus();\n    };\n  }, [isActive]);\n\n  return containerRef;\n}"
    },
    {
      "id": "17",
      "title": "Advanced Form State Machine",
      "description": "XState-based form management with validation",
      "language": "typescript",
      "tags": ["xstate", "forms", "state-management"],
      "code": "import { createMachine, assign } from 'xstate';\n\nconst formMachine = createMachine({\n  id: 'form',\n  initial: 'idle',\n  context: {\n    data: {},\n    errors: {},\n    touched: {},\n    isValid: false\n  },\n  states: {\n    idle: {\n      on: {\n        CHANGE: {\n          target: 'validating',\n          actions: ['updateField', 'markTouched']\n        },\n        SUBMIT: {\n          target: 'validating',\n          actions: ['markAllTouched']\n        }\n      }\n    },\n    validating: {\n      invoke: {\n        src: 'validateFields',\n        onDone: [\n          {\n            target: 'valid',\n            cond: (_, event) => Object.keys(event.data.errors).length === 0,\n            actions: ['clearErrors', 'setValid']\n          },\n          {\n            target: 'invalid',\n            actions: ['setErrors', 'setInvalid']\n          }\n        ]\n      }\n    },\n    valid: {\n      on: {\n        CHANGE: {\n          target: 'validating',\n          actions: ['updateField', 'markTouched']\n        },\n        SUBMIT: 'submitting'\n      }\n    },\n    invalid: {\n      on: {\n        CHANGE: {\n          target: 'validating',\n          actions: ['updateField', 'markTouched']\n        }\n      }\n    },\n    submitting: {\n      invoke: {\n        src: 'submitForm',\n        onDone: 'submitted',\n        onError: {\n          target: 'invalid',\n          actions: 'setSubmissionErrors'\n        }\n      }\n    },\n    submitted: {\n      type: 'final'\n    }\n  }\n});"
    },
    {
      "id": "18",
      "title": "Advanced Authentication Flow",
      "description": "Complete authentication system with refresh tokens",
      "language": "typescript",
      "tags": ["auth", "security", "jwt"],
      "code": "class AuthService {\n  private static instance: AuthService;\n  private refreshPromise: Promise<string> | null = null;\n\n  private constructor() {}\n\n  static getInstance() {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  async login(credentials: LoginCredentials): Promise<User> {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n\n    if (!response.ok) {\n      throw new Error('Authentication failed');\n    }\n\n    const { user, tokens } = await response.json();\n    this.setTokens(tokens);\n    return user;\n  }\n\n  async refreshToken(): Promise<string> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    this.refreshPromise = (async () => {\n      try {\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken) throw new Error('No refresh token');\n\n        const response = await fetch('/api/auth/refresh', {\n          method: 'POST',\n          headers: { Authorization: `Bearer ${refreshToken}` }\n        });\n\n        if (!response.ok) throw new Error('Refresh failed');\n\n        const { tokens } = await response.json();\n        this.setTokens(tokens);\n        return tokens.accessToken;\n      } finally {\n        this.refreshPromise = null;\n      }\n    })();\n\n    return this.refreshPromise;\n  }\n\n  private setTokens(tokens: AuthTokens) {\n    localStorage.setItem('accessToken', tokens.accessToken);\n    localStorage.setItem('refreshToken', tokens.refreshToken);\n  }\n}"
    }
  ]
} 